{"componentChunkName":"component---src-templates-blog-post-template-js","path":"/blog/custom-cra-workbox-service-worker","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>This tutorial was written as of <code class=\"language-text\">\"react-scripts\": \"^3.4.1\"</code>.</p>\n</blockquote>\n<p>As we all know, <code class=\"language-text\">create-react-app</code> makes starting development on a react project fairly easy.\nIt's a great starting point to get your app up and running, however, sometimes when you need that extra bit of functionality that's not provided out the box, you can find that it can be quite a mess to figure out. Particularly for my case, where I needed to have my own custom workbox setup for a project.</p>\n<p>Short of ejecting your app (don't do it if you don't know what you're doing), there's few other options to extend webpack functionality such as:</p>\n<ul>\n<li><a href=\"https://github.com/timarney/react-app-rewired\">react-app-rewired</a> (which stopped supporting CRA past version 2.~ of <code class=\"language-text\">react-scripts</code>)</li>\n<li><a href=\"https://github.com/gsoft-inc/craco\">craco</a> (kindly like <code class=\"language-text\">react-app-rewired</code> with support for 3.~ support for <code class=\"language-text\">react-scripts</code>)</li>\n</ul>\n<p>I tried both of these tools, <code class=\"language-text\">react-app-rewired</code> for over a year, and <code class=\"language-text\">craco</code> for a short period when I finally wanted to update my project dependencies from <code class=\"language-text\">react-scripts</code> v1.something... (Yes... it was that old).\nAnd for most of my issues, the above tools solved my problem.</p>\n<p><em>At this point I'd say check the above tools out to see if they provide the functionality you're looking for before proceeding any further. No need to reinvent the wheel if you musn't.</em></p>\n<p>I found I needed more functionality from my workbox than what the above tools plugins provided. Particularly, I wanted to implement <code class=\"language-text\">backgroundSync</code> which essentially provides a way to queue up failed requests and retry them (even in the background) when connectivity is restored.</p>\n<blockquote>\n<p>I will not be covering <code class=\"language-text\">backgroundSync</code> in this post, but it's fairly easy to implement after this setup.</p>\n</blockquote>\n<h2>Concept</h2>\n<p>It's hard to hook into <code class=\"language-text\">create-react-app</code>'s workbox setup solely through configuration. Instead, what we will implement is a set of scripts to replace the generated service worker <code class=\"language-text\">create-react-app</code> provides with our very own one ðŸ˜ˆ</p>\n<h2>Setup</h2>\n<p>In your terminal at the root of your project, install the <code class=\"language-text\">workbox-cli</code> dependency (as a dev dependency).</p>\n<p>npm: <code class=\"language-text\">npm install -D workbox-cli</code></p>\n<p>yarn: <code class=\"language-text\">yarn add --dev workbox-cli</code></p>\n<p>What this does is enable us to use a set of commands provided by the dependecy to generate our service worker script [<a href=\"https://developers.google.com/web/tools/workbox/modules/workbox-cli\">read more</a>]</p>\n<p>Next we're going to prep our scripts in our <code class=\"language-text\">package.json</code> which will handle building our own service-worker, and removing the generated one.</p>\n<p>In your <code class=\"language-text\">package.json</code> file, add the following scripts:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"build-sw\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"workbox injectManifest workbox.config.js\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"clean-cra-sw\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rm -f build/precache-manifest.*.js &amp;&amp; rm -f build/service-worker.js\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"replace-sw\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run build-sw &amp;&amp; npm run clean-cra-sw\"</span></code></pre></div>\n<p><code class=\"language-text\">build-sw</code>: Builds our service worker (with <code class=\"language-text\">workbox-cli</code>) based on config we will define later in <code class=\"language-text\">workbox.config.js</code></p>\n<p><code class=\"language-text\">clean-cra-sw</code>: A unix based script to remove (<code class=\"language-text\">rm</code>) forcefully (<code class=\"language-text\">-f</code>) the precache-manifest files (which we won't need because our custom service worker will handle injecting it <em><code class=\"language-text\">injectManifest</code></em>), and the generated service worker</p>\n<p><code class=\"language-text\">replace-sw</code>: An npm script to run first the <code class=\"language-text\">build-sw</code> script and then the <code class=\"language-text\">clean-cra-sw</code> script</p>\n<p>Finally, what we want to do is append our replacement script, <code class=\"language-text\">replace-sw</code>, to our existing build script.\nIn your <code class=\"language-text\">package.json</code> file, add the following to the end of your build script (without the ...):\n<code class=\"language-text\">build</code>: <code class=\"language-text\">...&amp;&amp; npm run replace-sw</code></p>\n<h2>Workbox Configuration</h2>\n<p>In the root of your application, (where your <code class=\"language-text\">package.json</code> lives (not inside your <code class=\"language-text\">src</code> directory)), create a <code class=\"language-text\">workbox.config.js</code> file.\nThis will hold the basic configuration for workbox.</p>\n<p>In the file, add the following lines of code:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token literal-property property\">swSrc</span><span class=\"token operator\">:</span> <span class=\"token string\">'src/sw-custom.js'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">swDest</span><span class=\"token operator\">:</span> <span class=\"token string\">'build/sw.js'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">globDirectory</span><span class=\"token operator\">:</span> <span class=\"token string\">'build'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">globPatterns</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n\t\t<span class=\"token string\">\"**/*.{js,css,html}\"</span>\n\t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">globIgnores</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"**/*.map\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"**/asset-manifest*.js\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"**/service-worker.js\"</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p> This basically sets our source file for extra workbox setup for <code class=\"language-text\">workbox-cli</code> to work with, a destination directory where our generated service-worker (called <code class=\"language-text\">sw.js</code>) will live, and some other basic setup info.</p>\n<p> The default generated service worker is usually called <code class=\"language-text\">service-worker.js|ts</code> and lives in the build directory. To this effect, the <code class=\"language-text\">serviceWorker.js</code> file that registers or unregisters our service worker (provided by default by <code class=\"language-text\">create-react-app</code>) references this file.</p>\n<p> Seeing as we would want our own service worker that we build to be used in the registration/unregistration process, we need to make a tiny tweak the the <code class=\"language-text\">serviceWorker.js</code> file provided to us.</p>\n<p> In the file, find the following line: </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> swUrl <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PUBLIC_URL</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/service-worker.js</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p> and replace the last part to refer to our to-be-built service worker: </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> swUrl <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PUBLIC_URL</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/sw.js</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p> Now when you call the <code class=\"language-text\">register()</code> method of the <code class=\"language-text\">serviceWorker.js|ts</code> file, our service worker will be utilized.</p>\n<h2>Custom Service Worker</h2>\n<p> The final bit to glue everything together is the missing <code class=\"language-text\">sw-custom.js</code> file referenced in our <code class=\"language-text\">workbox.config.js</code>.\nIn this file we will define an injection point for our manifest, and any other workbox modules we want to utilize (like caching or <code class=\"language-text\">backgroundSync</code>) will go in here.</p>\n<p> Inside your <code class=\"language-text\">src</code> directory, create a <code class=\"language-text\">sw-custom.js</code> file and fill it with the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'function'</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">typeof</span> importScripts<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">importScripts</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://storage.googleapis.com/workbox-cdn/releases/5.1.2/workbox-sw.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Workbox loaded</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>workbox<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self <span class=\"token operator\">&amp;&amp;</span> self<span class=\"token punctuation\">.</span>location <span class=\"token operator\">&amp;&amp;</span> self<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>hostname <span class=\"token operator\">===</span> <span class=\"token string\">'localhost'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Localhost detected. Running Workbox in debug mode!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tworkbox<span class=\"token punctuation\">.</span><span class=\"token function\">setConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">debug</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// We have access to all the workbox modules here so </span>\n       <span class=\"token comment\">// we can configure our service worker how we want</span>\n\n\t\t<span class=\"token comment\">// Manifest injection point</span>\n\t\tworkbox<span class=\"token punctuation\">.</span>precaching<span class=\"token punctuation\">.</span><span class=\"token function\">precacheAndRoute</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>__WB_MANIFEST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n       <span class=\"token comment\">/**\n        * BEYOND THIS POINT, MOST OF THIS CONFIG IS UP TO YOU...\n        * YOU CAN CUSTOMIZE YOUR WORKBOX SERVICE-WORKER HOWEVER YOU WANT\n       **/</span>\n\n\t\t<span class=\"token comment\">// https://github.com/GoogleChrome/workbox/issues/2095</span>\n\t\t<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> workbox<span class=\"token punctuation\">.</span>precaching<span class=\"token punctuation\">.</span><span class=\"token function\">createHandlerBoundToURL</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> navigationRoute <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">workbox<span class=\"token punctuation\">.</span>routing<span class=\"token punctuation\">.</span>NavigationRoute</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token literal-property property\">denylist</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\/__</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\/[^\\/]+.[^\\/]+$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">]</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tworkbox<span class=\"token punctuation\">.</span>routing<span class=\"token punctuation\">.</span><span class=\"token function\">registerRoute</span><span class=\"token punctuation\">(</span>navigationRoute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// Cache Images</span>\n\t\tworkbox<span class=\"token punctuation\">.</span>routing<span class=\"token punctuation\">.</span><span class=\"token function\">registerRoute</span><span class=\"token punctuation\">(</span>\n\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'regExForUrlForImagesHere'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">workbox<span class=\"token punctuation\">.</span>strategies<span class=\"token punctuation\">.</span>CacheFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token literal-property property\">cacheName</span><span class=\"token operator\">:</span> <span class=\"token string\">'images'</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// JS, CSS caching</span>\n\t\tworkbox<span class=\"token punctuation\">.</span>routing<span class=\"token punctuation\">.</span><span class=\"token function\">registerRoute</span><span class=\"token punctuation\">(</span>\n\t\t\t<span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(?:js|css)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">workbox<span class=\"token punctuation\">.</span>strategies<span class=\"token punctuation\">.</span>StaleWhileRevalidate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token literal-property property\">cacheName</span><span class=\"token operator\">:</span> <span class=\"token string\">'static-resources'</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// Offline Google Analytics (if you want it)</span>\n\t\tworkbox<span class=\"token punctuation\">.</span>googleAnalytics<span class=\"token punctuation\">.</span><span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n       <span class=\"token comment\">// You can fit other workbox modules and configure them how you want...</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">' Workbox could not be loaded. No offline support.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The code above glues together everything. We import the workbox script and as such, can utilize any sub-modules workbox provides to setup our perfect service worker.</p>\n<blockquote>\n<p>If you're working with typescript, modify your <code class=\"language-text\">tsconfig.json</code> to exclude any files that start with sw:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n\t<span class=\"token string\">\"src\"</span><span class=\"token punctuation\">,</span>\n    ...\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"exclude\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/sw*\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n</blockquote>\n<p>And that's it. We're done! Our very own custom workbox service worker.\nThanks for following along.</p>\n<p>References:</p>\n<ul>\n<li><a href=\"https://developers.google.com/web/tools/workbox/modules/workbox-cli\">https://developers.google.com/web/tools/workbox/modules/workbox-cli</a></li>\n<li><a href=\"https://medium.com/@chinmaya.cp/custom-service-worker-in-cra-create-react-app-3b401d24b875\">https://medium.com/@chinmaya.cp/custom-service-worker-in-cra-create-react-app-3b401d24b875</a></li>\n</ul>\n<p>If you have any questions, feel free to hit me up on <a href=\"https://twitter.com/niiapa\">Twitter</a>.</p>","frontmatter":{"date":"2020-05-07","formattedDate":"07 May, 2020","path":"/blog/custom-cra-workbox-service-worker","title":"Custom Workbox Service Worker for Create React App (CRA)"}}},"pageContext":{}},"staticQueryHashes":["3496355619","68838506"]}