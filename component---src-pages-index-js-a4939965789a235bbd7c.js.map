{"version":3,"file":"component---src-pages-index-js-a4939965789a235bbd7c.js","mappings":"iJAeA,IAZeA,IAEPC,EAAAA,cAACC,EAAAA,EAAW,CACRC,IAAI,uBACJC,IAAI,SACJC,MAAO,IACPC,OAAQ,IACRC,OAAO,cAAaC,YAAAC,EAAA,O,qCCMhC,IAZaC,IAAA,IAAC,SAAEC,GAAUD,EAAA,OACtBT,EAAAA,cAAA,OAAKW,UAAU,QACXX,EAAAA,cAAA,OAAKW,UAAU,gBACVD,GAEH,C,0HC4DV,MAjEqBE,KACjB,MAAQC,mBAAmB,MAAEC,KAAYC,EAAAA,EAAAA,gBAAe,aAwBlDC,EAAiCC,GAAcH,EAAMI,QAAO,CAACC,EAAOC,KACtE,MAAMC,EAHeD,KAAI,IAAAE,EAAA,OAAKF,SAAU,QAANE,EAAJF,EAAMG,YAAI,IAAAD,OAAN,EAAJA,EAAYE,WAAW,EAGxCC,CAAgBL,GACvBM,EAHkBN,KAAI,IAAAO,EAAA,OAAKP,SAAU,QAANO,EAAJP,EAAMG,YAAI,IAAAI,OAAN,EAAJA,EAAYD,OAAO,EAGpCE,CAAmBR,GAEnC,OAAIH,GAAaA,EAAUI,GACjB,GAANQ,QAAAC,EAAAA,EAAAA,GAAWX,GAAK,CAAG,IAAKE,EAAMK,aAG3BP,CAAK,GACb,IAEGY,EAAwBf,GAA+BK,IAAUA,EAAKW,WACtEC,EAAsBjB,GAA+BK,GAASA,EAAKW,WAEnEE,EAAazB,IAAA,IAAC,KAAE0B,EAAI,MAAEC,EAAK,QAAEV,EAAO,KAAEW,EAAI,cAAEC,GAAe7B,EAAA,OAC7DT,EAAAA,cAACuC,EAAAA,KAAI,CACDC,IAAKL,EACLM,GAAIN,EACJxB,UAAU,iBAEVX,EAAAA,cAAC0C,EAAAA,EAAI,KACD1C,EAAAA,cAAA,UAAKoC,GAELpC,EAAAA,cAAA,SAAI0B,GAEJ1B,EAAAA,cAAA,OAAKW,UAAU,QACXX,EAAAA,cAAA,QAAM2C,SAAUN,GAAOC,KAG5B,EAGX,OACItC,EAAAA,cAAA,OAAKW,UAAU,QACVsB,EAAoBW,IAAIV,GACxBH,EAAsBa,IAAIV,GACzB,E,oBC/Bd,MA5BcW,IACV7C,EAAAA,cAAC8C,EAAAA,EAAM,KACH9C,EAAAA,cAAC+C,EAAAA,EAAG,CAACX,MAAM,SAEXpC,EAAAA,cAAA,OAAKW,UAAU,aACXX,EAAAA,cAAA,OAAKW,UAAU,UACXX,EAAAA,cAACD,EAAAA,EAAM,OAGXC,EAAAA,cAAA,SAAG,QACMA,EAAAA,cAAA,WAAK,gEAKlBA,EAAAA,cAAA,WACIA,EAAAA,cAAA,WACIA,EAAAA,cAAA,UACIA,EAAAA,cAAA,UACIA,EAAAA,cAAA,QAAMW,UAAU,eAAc,WAI1CX,EAAAA,cAACY,EAAY,O","sources":["webpack://niiapa.github.io/./src/components/avatar.js","webpack://niiapa.github.io/./src/components/item.js","webpack://niiapa.github.io/./src/components/blogPostList.js","webpack://niiapa.github.io/./src/pages/index.js"],"sourcesContent":["import { StaticImage } from \"gatsby-plugin-image\";\nimport React from 'react';\n\nconst Avatar = () => {\n    return (\n        <StaticImage\n            src=\"../images/avatar.jpg\"\n            alt=\"Avatar\"\n            width={300}\n            height={300}\n            layout=\"constrained\"\n        />\n    );\n};\n\nexport default Avatar;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport '../styles/style.scss';\n\nconst Item = ({ children }) => (\n    <div className=\"item\">\n        <div className=\"item-content\">\n            {children}\n        </div>\n    </div>\n);\n\nItem.propTypes = {\n    children: PropTypes.node.isRequired,\n};\n\nexport default Item;\n","import { graphql, useStaticQuery, Link } from 'gatsby';\nimport React from 'react';\nimport Item from \"./item\";\n\nconst BlogPostList = () => {\n    const { allMarkdownRemark: { edges } } = useStaticQuery(\n        graphql`\n            query {\n                allMarkdownRemark(sort: { frontmatter: { date: DESC }}, limit: 1000) {\n                    edges {\n                        node {\n                            id\n                            excerpt(pruneLength: 200)\n                            frontmatter {\n                                date\n                                formattedDate: date(formatString: \"DD MMMM YYYY\")\n                                path\n                                title\n                                isPinned\n                            }\n                        }\n                    }\n                }\n            }\n        `\n    );\n\n    const getPostFromEdge = (edge) => edge?.node?.frontmatter;\n    const getExcerptFromEdge = (edge) => edge?.node?.excerpt;\n    const getPostsWithExcerptsFromEdges = (condition) => edges.reduce((posts, edge) => {\n        const post = getPostFromEdge(edge);\n        const excerpt = getExcerptFromEdge(edge);\n\n        if (condition && condition(post)) {\n            return [...posts , { ...post, excerpt }];\n        }\n\n        return posts;\n    }, []);\n\n    const unpinnedBlogPostEdges = getPostsWithExcerptsFromEdges((post) => !post.isPinned);\n    const pinnedBlogPostEdges = getPostsWithExcerptsFromEdges((post) => post.isPinned);\n\n    const renderPost = ({ path, title, excerpt, date, formattedDate }) => (\n        <Link\n            key={path}\n            to={path}\n            className='unstyled-link'\n        >\n            <Item>\n                <h3>{title}</h3>\n\n                <p>{excerpt}</p>\n\n                <div className='meta'>\n                    <time dateTime={date}>{formattedDate}</time>\n                </div>\n            </Item>\n        </Link>\n    );\n    \n    return (\n        <div className='list'>\n            {pinnedBlogPostEdges.map(renderPost)}\n            {unpinnedBlogPostEdges.map(renderPost)}\n        </div>\n    );\n};\n\nexport default BlogPostList;\n","import React from 'react';\nimport Avatar from '../components/avatar';\nimport BlogPostList from '../components/blogPostList';\nimport Layout from '../components/layout';\nimport Seo from '../components/seo';\n\nconst Index = () => (\n    <Layout>\n        <Seo title=\"Home\"/>\n        \n        <div className=\"intro-box\">\n            <div className='avatar'>\n                <Avatar/>\n            </div>\n            \n            <p>\n                Hey, <br/>\n                I'm Nii. I start shit with code and never see it through ðŸ™ƒ\n            </p>\n        </div>\n        \n        <div>\n            <nav>\n                <ul>\n                    <li>\n                        <span className='active-link'>Blog</span>\n                    </li>\n                </ul>\n            </nav>\n            <BlogPostList/>\n        </div>\n    </Layout>\n);\n\nexport default Index;\n"],"names":["Avatar","React","StaticImage","src","alt","width","height","layout","__imageData","require","_ref","children","className","BlogPostList","allMarkdownRemark","edges","useStaticQuery","getPostsWithExcerptsFromEdges","condition","reduce","posts","edge","post","_edge$node","node","frontmatter","getPostFromEdge","excerpt","_edge$node2","getExcerptFromEdge","concat","_toConsumableArray","unpinnedBlogPostEdges","isPinned","pinnedBlogPostEdges","renderPost","path","title","date","formattedDate","Link","key","to","Item","dateTime","map","Index","Layout","Seo"],"sourceRoot":""}